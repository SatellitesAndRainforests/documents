
https://github.com/nhsconnect/national-document-repository/pull/493/files




diff --git a/app/cypress/e2e/0-ndr-core-tests/gp_user_workflows/download_lloyd_george_workflow.cy.js b/app/cypress/e2e/0-ndr-core-tests/gp_user_workflows/download_lloyd_george_workflow.cy.js
index 972cf3c4..e458d3ab 100644
--- a/app/cypress/e2e/0-ndr-core-tests/gp_user_workflows/download_lloyd_george_workflow.cy.js
+++ b/app/cypress/e2e/0-ndr-core-tests/gp_user_workflows/download_lloyd_george_workflow.cy.js
@@ -19,18 +19,21 @@ const testFiles = [
         created: '2024-05-07T14:52:00.827602Z',
         virusScannerResult: 'Clean',
         id: 'test-id',
+        fileSize: 200,
     },
     {
         fileName: '2of2_testy_test.pdf',
         created: '2024-05-07T14:52:00.827602Z',
         virusScannerResult: 'Clean',
         id: 'test-id-2',
+        fileSize: 200,
     },
     {
         fileName: '1of1_lone_test_file.pdf',
         created: '2024-01-01T14:52:00.827602Z',
         virusScannerResult: 'Clean',
         id: 'test-id-3',
+        fileSize: 200,
     },
 ];
 
@@ -40,6 +43,7 @@ const singleTestFile = [
         created: '2024-01-01T14:52:00.827602Z',
         virusScannerResult: 'Clean',
         id: 'test-id-3',
+        fileSize: 200,
     },
 ];
 
diff --git a/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.test.tsx b/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.test.tsx
index 877a7090..048ae2d0 100644
--- a/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.test.tsx
+++ b/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.test.tsx
@@ -5,7 +5,6 @@ import usePatient from '../../../../helpers/hooks/usePatient';
 import { LinkProps } from 'react-router-dom';
 import LloydGeorgeSelectSearchResults, { Props } from './LloydGeorgeSelectSearchResults';
 import userEvent from '@testing-library/user-event';
-import { routes } from '../../../../types/generic/routes';
 import { SEARCH_AND_DOWNLOAD_STATE } from '../../../../types/pages/documentSearchResultsPage/types';
 import { runAxeTest } from '../../../../helpers/test/axeTestHelper';
 
@@ -57,6 +56,20 @@ describe('LloydGeorgeSelectSearchResults', () => {
             expect(screen.getByTestId('toggle-selection-btn')).toBeInTheDocument();
         });
 
+        it('renders the correct table headers', () => {
+            renderComponent({ selectedDocuments: mockSelectedDocuments });
+
+            const headers = screen.getAllByRole('columnheader');
+            const expectedHeaders = ['Selected', 'Filename', 'Upload date', 'File size'];
+
+            expectedHeaders.forEach((headerText, index) => {
+                expect(headers[index]).toHaveTextContent(headerText);
+            });
+
+            const filesTable = screen.getByTestId('available-files-table-title');
+            expect(filesTable).toHaveTextContent(/bytes|KB|MB|GB/);
+        });
+
         it('shows error box when download selected files button is clicked but no files selected', async () => {
             renderComponent({ selectedDocuments: [] });
 
diff --git a/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.tsx b/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.tsx
index 8a7da7ec..8a009b5c 100644
--- a/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.tsx
+++ b/app/src/components/blocks/_lloydGeorge/lloydGeorgeSelectSearchResults/LloydGeorgeSelectSearchResults.tsx
@@ -8,6 +8,7 @@ import { SEARCH_AND_DOWNLOAD_STATE } from '../../../../types/pages/documentSearc
 import ErrorBox from '../../../layout/errorBox/ErrorBox';
 import PatientSummary from '../../../generic/patientSummary/PatientSummary';
 import BackButton from '../../../generic/backButton/BackButton';
+import formatFileSize from '../../../../helpers/utils/formatFileSize';
 
 export type Props = {
     searchResults: Array<SearchResult>;
@@ -108,6 +109,7 @@ const AvailableFilesTable = ({
                         )}
                         <Table.Cell className={'table-column-header'}>Filename</Table.Cell>
                         <Table.Cell className={'table-column-header'}>Upload date</Table.Cell>
+                        <Table.Cell className={'table-column-header'}>File size</Table.Cell>
                     </Table.Row>
                 </Table.Head>
                 <Table.Body>
@@ -147,6 +149,12 @@ const AvailableFilesTable = ({
                             >
                                 {getFormattedDatetime(new Date(result.created))}
                             </Table.Cell>
+                            <Table.Cell
+                                id={'available-files-row-' + index + '-file-size'}
+                                data-testid="file-size"
+                            >
+                                {formatFileSize(result.fileSize)}
+                            </Table.Cell>
                         </Table.Row>
                     ))}
                 </Table.Body>
diff --git a/app/src/helpers/test/testBuilders.ts b/app/src/helpers/test/testBuilders.ts
index b73100c6..53523f93 100644
--- a/app/src/helpers/test/testBuilders.ts
+++ b/app/src/helpers/test/testBuilders.ts
@@ -123,6 +123,7 @@ const buildSearchResult = (searchResultOverride?: Partial<SearchResult>) => {
         created: moment().format(),
         virusScannerResult: 'Clean',
         ID: '1234qwer-241ewewr',
+        fileSize: 224,
         ...searchResultOverride,
     };
     return result;
diff --git a/app/src/types/generic/searchResult.ts b/app/src/types/generic/searchResult.ts
index 769d9387..9225ba18 100644
--- a/app/src/types/generic/searchResult.ts
+++ b/app/src/types/generic/searchResult.ts
@@ -3,4 +3,5 @@ export type SearchResult = {
     created: string;
     virusScannerResult: string;
     ID: string;
+    fileSize: number;
 };
diff --git a/lambdas/enums/snomed_codes.py b/lambdas/enums/snomed_codes.py
index 299441fa..9b1f3f99 100644
--- a/lambdas/enums/snomed_codes.py
+++ b/lambdas/enums/snomed_codes.py
@@ -1,18 +1,9 @@
-from enum import Enum
+from enum import StrEnum
 
-from pydantic import BaseModel
 
+class SnomedCodesType(StrEnum):
+    LLOYD_GEORGE = "16521000000101"
 
-class SnomedCode(BaseModel):
-    code: str
-    display_name: str
 
-
-class SnomedCodes(Enum):
-    LLOYD_GEORGE = SnomedCode(
-        code="16521000000101", display_name="Lloyd George record folder"
-    )
-    CARE_PLAN = SnomedCode(code="734163000", display_name="Care plan")
-    GENERAL_MEDICAL_PRACTICE = SnomedCode(
-        code="1060971000000108", display_name="General practice service"
-    )
+class SnomedCodesCategory(StrEnum):
+    CARE_PLAN = "734163000"
diff --git a/lambdas/models/nrl_fhir_document_reference.py b/lambdas/models/nrl_fhir_document_reference.py
index 196d03ec..ed1f6790 100644
--- a/lambdas/models/nrl_fhir_document_reference.py
+++ b/lambdas/models/nrl_fhir_document_reference.py
@@ -1,6 +1,5 @@
 from typing import Optional
 
-from enums.snomed_codes import SnomedCode, SnomedCodes
 from fhir.resources.R4B.documentreference import DocumentReference
 from models.nrl_sqs_message import NrlAttachment
 from pydantic import BaseModel, ConfigDict
@@ -11,11 +10,9 @@ class FhirDocumentReference(BaseModel):
     model_config = ConfigDict(alias_generator=to_camel)
     nhs_number: str
     custodian: str
-    snomed_code_doc_type: SnomedCode = SnomedCodes.LLOYD_GEORGE.value
-    snomed_code_category: SnomedCode = SnomedCodes.CARE_PLAN.value
-    snomed_code_practice_setting: SnomedCode = (
-        SnomedCodes.GENERAL_MEDICAL_PRACTICE.value
-    )
+    snomed_code_doc_type: str = "None"
+    snomed_code_category: str = "None"
+    snomed_code_category_display: str = "Care plan"
     attachment: Optional[NrlAttachment] = NrlAttachment()
 
     def build_fhir_dict(self):
@@ -39,8 +36,7 @@ class FhirDocumentReference(BaseModel):
                 "coding": [
                     {
                         "system": snomed_url,
-                        "code": self.snomed_code_doc_type.code,
-                        "display": self.snomed_code_doc_type.display_name,
+                        "code": self.snomed_code_doc_type,
                     }
                 ]
             },
@@ -49,8 +45,8 @@ class FhirDocumentReference(BaseModel):
                     "coding": [
                         {
                             "system": snomed_url,
-                            "code": self.snomed_code_category.code,
-                            "display": self.snomed_code_category.display_name,
+                            "code": self.snomed_code_category,
+                            "display": self.snomed_code_category_display,
                         }
                     ]
                 }
@@ -75,16 +71,5 @@ class FhirDocumentReference(BaseModel):
                     },
                 }
             ],
-            "context": {
-                "practiceSetting": {
-                    "coding": [
-                        {
-                            "system": snomed_url,
-                            "code": self.snomed_code_practice_setting.code,
-                            "display": self.snomed_code_practice_setting.display_name,
-                        }
-                    ]
-                }
-            },
         }
         return DocumentReference(**structure_json)
diff --git a/lambdas/models/nrl_sqs_message.py b/lambdas/models/nrl_sqs_message.py
index aa3b9dbd..c6c82c22 100644
--- a/lambdas/models/nrl_sqs_message.py
+++ b/lambdas/models/nrl_sqs_message.py
@@ -1,6 +1,6 @@
 from typing import Optional
 
-from enums.snomed_codes import SnomedCode, SnomedCodes
+from enums.snomed_codes import SnomedCodesCategory, SnomedCodesType
 from pydantic import AliasGenerator, BaseModel, ConfigDict
 from pydantic.alias_generators import to_camel
 
@@ -17,16 +17,12 @@ class NrlAttachment(BaseModel):
 
 class NrlSqsMessage(BaseModel):
     model_config = ConfigDict(
-        alias_generator=AliasGenerator(serialization_alias=to_camel),
-        use_enum_values=True,
+        alias_generator=AliasGenerator(serialization_alias=to_camel)
     )
 
     nhs_number: str
-    snomed_code_doc_type: SnomedCode = SnomedCodes.LLOYD_GEORGE.value
-    snomed_code_category: SnomedCode = SnomedCodes.CARE_PLAN.value
-    snomed_code_practice_setting: SnomedCode = (
-        SnomedCodes.GENERAL_MEDICAL_PRACTICE.value
-    )
+    snomed_code_doc_type: str = SnomedCodesType.LLOYD_GEORGE
+    snomed_code_category: str = SnomedCodesCategory.CARE_PLAN
     description: str = ""
     attachment: Optional[NrlAttachment] = None
     action: str
diff --git a/lambdas/services/bulk_upload_metadata_service.py b/lambdas/services/bulk_upload_metadata_service.py
index 4a31120a..a4c55b72 100644
--- a/lambdas/services/bulk_upload_metadata_service.py
+++ b/lambdas/services/bulk_upload_metadata_service.py
@@ -74,9 +74,7 @@ class BulkUploadMetadataService:
         logger.info("Parsing bulk upload metadata")
 
         patients = {}
-        with open(
-            csv_file_path, mode="r", encoding="utf-8", errors="replace"
-        ) as csv_file_handler:
+        with open(csv_file_path, mode="r") as csv_file_handler:
             csv_reader: Iterable[dict] = csv.DictReader(csv_file_handler)
             for row in csv_reader:
                 file_metadata = MetadataFile.model_validate(row)
diff --git a/lambdas/services/document_deletion_service.py b/lambdas/services/document_deletion_service.py
index 8f634d78..09ba07e2 100644
--- a/lambdas/services/document_deletion_service.py
+++ b/lambdas/services/document_deletion_service.py
@@ -6,7 +6,7 @@ from botocore.exceptions import ClientError
 from enums.lambda_error import LambdaError
 from enums.nrl_sqs_upload import NrlActionTypes
 from enums.s3_lifecycle_tags import S3LifecycleTags
-from enums.snomed_codes import SnomedCodes
+from enums.snomed_codes import SnomedCodesCategory, SnomedCodesType
 from enums.supported_document_types import SupportedDocumentTypes
 from models.document_reference import DocumentReference
 from models.nrl_sqs_message import NrlSqsMessage
@@ -91,13 +91,13 @@ class DocumentDeletionService:
         delete_nrl_message = NrlSqsMessage(
             nhs_number=nhs_number,
             action=NrlActionTypes.DELETE,
-            snomed_code_doc_type=SnomedCodes.LLOYD_GEORGE.value,
-            snomed_code_category=SnomedCodes.CARE_PLAN.value,
+            snomed_code_doc_type=SnomedCodesType.LLOYD_GEORGE,
+            snomed_code_category=SnomedCodesCategory.CARE_PLAN,
         )
         sqs_group_id = f"NRL_delete_{uuid.uuid4()}"
         nrl_queue_url = os.environ["NRL_SQS_QUEUE_URL"]
         self.sqs_service.send_message_fifo(
             queue_url=nrl_queue_url,
-            message_body=delete_nrl_message.model_dump_json(exclude_unset=True),
+            message_body=delete_nrl_message.model_dump_json(),
             group_id=sqs_group_id,
         )
diff --git a/lambdas/services/document_reference_search_service.py b/lambdas/services/document_reference_search_service.py
index 8f1f4c2b..d3d2fb3d 100644
--- a/lambdas/services/document_reference_search_service.py
+++ b/lambdas/services/document_reference_search_service.py
@@ -49,10 +49,21 @@ class DocumentReferenceSearchService(DocumentService):
                         423, LambdaError.UploadInProgressError
                     )
                 results.extend(
-                    document.model_dump(
-                        include={"file_name", "created", "virus_scanner_result", "id"},
-                        by_alias=True,
-                    )
+                    {
+                        **document.model_dump(
+                            include={
+                                "file_name",
+                                "created",
+                                "virus_scanner_result",
+                                "id",
+                            },
+                            by_alias=True,
+                        ),
+                        "fileSize": self.s3_service.get_file_size(
+                            s3_bucket_name=document.get_file_bucket(),
+                            object_key=document.get_file_key(),
+                        ),
+                    }
                     for document in documents
                 )
             return results
diff --git a/lambdas/services/nrl_api_service.py b/lambdas/services/nrl_api_service.py
index 52f3ed5b..9e33d01b 100644
--- a/lambdas/services/nrl_api_service.py
+++ b/lambdas/services/nrl_api_service.py
@@ -2,9 +2,8 @@ import os
 import uuid
 
 import requests
-from enums.snomed_codes import SnomedCode
+from requests import HTTPError
 from requests.adapters import HTTPAdapter
-from requests.exceptions import ConnectionError, HTTPError, Timeout
 from urllib3 import Retry
 from utils.audit_logging_setup import LoggingService
 from utils.exceptions import NrlApiException
@@ -47,7 +46,7 @@ class NrlApiService:
             )
             response.raise_for_status()
             logger.info("Successfully created new pointer")
-        except (ConnectionError, Timeout, HTTPError) as e:
+        except HTTPError as e:
             logger.error(e.response.content)
             if e.response.status_code == 401 and retry_on_expired:
                 self.headers["Authorization"] = (
@@ -57,16 +56,14 @@ class NrlApiService:
             else:
                 raise NrlApiException("Error while creating new NRL Pointer")
 
-    def get_pointer(
-        self, nhs_number, record_type: SnomedCode = None, retry_on_expired: bool = True
-    ):
+    def get_pointer(self, nhs_number, record_type=None, retry_on_expired: bool = True):
         try:
             self.set_x_request_id()
             params = {
                 "subject:identifier": f"https://fhir.nhs.uk/Id/nhs-number|{nhs_number}"
             }
             if record_type:
-                params["type"] = f"http://snomed.info/sct|{record_type.code}"
+                params["type"] = f"http://snomed.info/sct|{record_type}"
             response = self.session.get(
                 url=self.endpoint, params=params, headers=self.headers
             )
@@ -82,7 +79,7 @@ class NrlApiService:
             else:
                 raise NrlApiException("Error while getting NRL Pointer")
 
-    def delete_pointer(self, nhs_number, record_type: SnomedCode = None):
+    def delete_pointer(self, nhs_number, record_type):
         search_results = self.get_pointer(nhs_number, record_type).get("entry", [])
         for entry in search_results:
             self.set_x_request_id()
diff --git a/lambdas/tests/unit/handlers/test_manage_nrl_pointer_handler.py b/lambdas/tests/unit/handlers/test_manage_nrl_pointer_handler.py
index b7a91c5c..c115a220 100644
--- a/lambdas/tests/unit/handlers/test_manage_nrl_pointer_handler.py
+++ b/lambdas/tests/unit/handlers/test_manage_nrl_pointer_handler.py
@@ -1,7 +1,7 @@
+import json
+
 import pytest
-from enums.snomed_codes import SnomedCodes
 from handlers.manage_nrl_pointer_handler import lambda_handler
-from models.nrl_sqs_message import NrlAttachment, NrlSqsMessage
 from utils.exceptions import NrlApiException
 
 
@@ -14,18 +14,18 @@ def mock_service(mocker):
 
 
 def build_test_sqs_message(action="create"):
-    doc_details = NrlAttachment(
-        url="https://example.org/my-doc.pdf",
-    )
-    sqs_message = NrlSqsMessage(
-        nhs_number="123456789",
-        action=action,
-        snomed_code_doc_type=SnomedCodes.LLOYD_GEORGE.value,
-        snomed_code_category=SnomedCodes.CARE_PLAN.value,
-        attachment=doc_details,
-    ).model_dump_json()
+    SQS_Message = {
+        "nhs_number": "123456789",
+        "snomed_code_doc_type": "16521000000101",
+        "snomed_code_category": "734163000",
+        "action": action,
+        "attachment": {
+            "contentType": "application/pdf",
+            "url": "https://example.org/my-doc.pdf",
+        },
+    }
     return {
-        "body": sqs_message,
+        "body": json.dumps(SQS_Message),
         "eventSource": "aws:sqs",
     }
 
diff --git a/lambdas/tests/unit/services/test_document_deletion_service.py b/lambdas/tests/unit/services/test_document_deletion_service.py
index 4a690c44..e68c7e1a 100644
--- a/lambdas/tests/unit/services/test_document_deletion_service.py
+++ b/lambdas/tests/unit/services/test_document_deletion_service.py
@@ -2,7 +2,6 @@ from unittest.mock import call
 
 import pytest
 from enums.s3_lifecycle_tags import S3LifecycleTags
-from enums.snomed_codes import SnomedCodes
 from enums.supported_document_types import SupportedDocumentTypes
 from services.document_deletion_service import DocumentDeletionService
 from tests.unit.conftest import (
@@ -228,14 +227,12 @@ def test_send_sqs_message_to_remove_pointer(mocker, mock_deletion_service):
 
     expected_message_body = (
         '{{"nhs_number":"{}",'
-        '"snomed_code_doc_type":{},'
-        '"snomed_code_category":{},'
+        '"snomed_code_doc_type":"16521000000101",'
+        '"snomed_code_category":"734163000",'
+        '"description":"",'
+        '"attachment":null,'
         '"action":"delete"}}'
-    ).format(
-        TEST_NHS_NUMBER,
-        SnomedCodes.LLOYD_GEORGE.value.model_dump_json(),
-        SnomedCodes.CARE_PLAN.value.model_dump_json(),
-    )
+    ).format(TEST_NHS_NUMBER)
 
     mock_deletion_service.send_sqs_message_to_remove_pointer(TEST_NHS_NUMBER)
 
diff --git a/lambdas/tests/unit/services/test_document_reference_search_service.py b/lambdas/tests/unit/services/test_document_reference_search_service.py
index c5539613..e64dbf21 100644
--- a/lambdas/tests/unit/services/test_document_reference_search_service.py
+++ b/lambdas/tests/unit/services/test_document_reference_search_service.py
@@ -12,18 +12,22 @@ MOCK_DOCUMENT_REFERENCE = [
     DocumentReference.model_validate(MOCK_SEARCH_RESPONSE["Items"][0])
 ]
 
+MOCK_FILE_SIZE = 24000
+
 EXPECTED_RESPONSE = {
     "created": "2024-01-01T12:00:00.000Z",
     "fileName": "document.csv",
     "virusScannerResult": "Clean",
     "ID": "3d8683b9-1665-40d2-8499-6e8302d507ff",
+    "fileSize": MOCK_FILE_SIZE,
 }
 
 
 @pytest.fixture
 def patched_service(mocker, set_env):
     service = DocumentReferenceSearchService()
-    mocker.patch.object(service, "s3_service")
+    mock_s3_service = mocker.patch.object(service, "s3_service")
+    mocker.patch.object(mock_s3_service, "get_file_size", return_value=MOCK_FILE_SIZE)
     mocker.patch.object(service, "dynamo_service")
     mocker.patch.object(service, "fetch_documents_from_table_with_filter")
     mocker.patch.object(service, "is_upload_in_process", return_value=False)
@@ -83,10 +87,10 @@ def test_get_document_references_dynamo_return_successful_response_single_table(
     patched_service, monkeypatch
 ):
     monkeypatch.setenv("DYNAMODB_TABLE_LIST", json.dumps(["test_table"]))
-
     patched_service.fetch_documents_from_table_with_filter.return_value = (
         MOCK_DOCUMENT_REFERENCE
     )
+
     expected_results = [EXPECTED_RESPONSE]
     actual = patched_service.get_document_references("1111111111")
 
diff --git a/lambdas/tests/unit/services/test_nrl_api_service.py b/lambdas/tests/unit/services/test_nrl_api_service.py
index 0c0241bd..997a3d83 100644
--- a/lambdas/tests/unit/services/test_nrl_api_service.py
+++ b/lambdas/tests/unit/services/test_nrl_api_service.py
@@ -1,5 +1,4 @@
 import pytest
-from enums.snomed_codes import SnomedCodes
 from requests import Response
 from services.nrl_api_service import NrlApiService
 from tests.unit.conftest import FAKE_URL, TEST_NHS_NUMBER
@@ -44,12 +43,12 @@ def test_get_end_user_ods_code(nrl_service):
 
 
 def test_get_pointer_with_record_type(mocker, nrl_service):
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     mocker.patch("uuid.uuid4", return_value="test_uuid")
 
     mock_params = {
         "subject:identifier": f"https://fhir.nhs.uk/Id/nhs-number|{TEST_NHS_NUMBER}",
-        "type": f"http://snomed.info/sct|{mock_type.code}",
+        "type": f"http://snomed.info/sct|{mock_type}",
     }
     mock_headers = {
         "Authorization": f"Bearer {ACCESS_TOKEN}",
@@ -65,11 +64,11 @@ def test_get_pointer_with_record_type(mocker, nrl_service):
 
 
 def test_get_pointer_with_record_type_no_retry(mocker, nrl_service):
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     mocker.patch("uuid.uuid4", return_value="test_uuid")
     mock_params = {
         "subject:identifier": f"https://fhir.nhs.uk/Id/nhs-number|{TEST_NHS_NUMBER}",
-        "type": f"http://snomed.info/sct|{mock_type.code}",
+        "type": f"http://snomed.info/sct|{mock_type}",
     }
     mock_headers = {
         "Authorization": f"Bearer {ACCESS_TOKEN}",
@@ -91,11 +90,11 @@ def test_get_pointer_with_record_type_no_retry(mocker, nrl_service):
 
 
 def test_get_pointer_with_record_type_with_retry(mocker, nrl_service):
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     mocker.patch("uuid.uuid4", return_value="test_uuid")
     mock_params = {
         "subject:identifier": f"https://fhir.nhs.uk/Id/nhs-number|{TEST_NHS_NUMBER}",
-        "type": f"http://snomed.info/sct|{mock_type.code}",
+        "type": f"http://snomed.info/sct|{mock_type}",
     }
     mock_headers = {
         "Authorization": f"Bearer {ACCESS_TOKEN}",
@@ -121,7 +120,7 @@ def test_get_pointer_raise_error(nrl_service):
     response.status_code = 400
     response._content = b"{}"
 
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
 
     nrl_service.session.get.return_value = response
     pytest.raises(NrlApiException, nrl_service.get_pointer, TEST_NHS_NUMBER, mock_type)
@@ -130,7 +129,7 @@ def test_get_pointer_raise_error(nrl_service):
 
 
 def test_delete_pointer_with_record_type_no_record(mocker, nrl_service):
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     mocker.patch("uuid.uuid4", return_value="test_uuid")
 
     nrl_response = {
@@ -146,7 +145,7 @@ def test_delete_pointer_with_record_type_no_record(mocker, nrl_service):
 
 
 def test_delete_pointer_with_record_type_one_record(mocker, nrl_service):
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     mocker.patch("uuid.uuid4", return_value="test_uuid")
     mock_pointer_id = "ODSCODE-1111bfb1-1111-2222-3333-4444555c666f"
     mock_headers = {
@@ -177,7 +176,7 @@ def test_delete_pointer_with_record_type_one_record(mocker, nrl_service):
 
 
 def test_delete_pointer_with_record_type_more_than_one_record(mocker, nrl_service):
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     mocker.patch("uuid.uuid4", return_value="test_uuid")
     mock_pointer_id = "ODSCODE-1111bfb1-1111-2222-3333-4444555c666"
 
@@ -210,7 +209,7 @@ def test_delete_pointer_not_raise_error(mocker, nrl_service):
     response = Response()
     response.status_code = 400
     response._content = b"{}"
-    mock_type = SnomedCodes.LLOYD_GEORGE.value
+    mock_type = 11111111
     nrl_response = {
         "resourceType": "Bundle",
         "type": "searchset",
diff --git a/lambdas/tests/unit/utils/test_lloyd_george_validator.py b/lambdas/tests/unit/utils/test_lloyd_george_validator.py
index 9019ae3b..f6ab4430 100644
--- a/lambdas/tests/unit/utils/test_lloyd_george_validator.py
+++ b/lambdas/tests/unit/utils/test_lloyd_george_validator.py
@@ -331,7 +331,7 @@ def test_validate_name_with_wrong_first_name(mocker, mock_pds_patient):
         validate_patient_name_using_full_name_history(
             lg_file_patient_name, mock_pds_patient
         )
-    assert mock_validate_name.call_count == 3
+    assert mock_validate_name.call_count == 2
 
 
 def test_validate_name_with_wrong_family_name(mocker, mock_pds_patient):
@@ -344,7 +344,7 @@ def test_validate_name_with_wrong_family_name(mocker, mock_pds_patient):
         validate_patient_name_using_full_name_history(
             lg_file_patient_name, mock_pds_patient
         )
-    assert mock_validate_name.call_count == 3
+    assert mock_validate_name.call_count == 2
 
 
 def test_validate_name_with_historical_name(mocker, mock_pds_patient):
diff --git a/lambdas/utils/lloyd_george_validator.py b/lambdas/utils/lloyd_george_validator.py
index d44ff154..80569617 100644
--- a/lambdas/utils/lloyd_george_validator.py
+++ b/lambdas/utils/lloyd_george_validator.py
@@ -190,6 +190,8 @@ def validate_patient_name_using_full_name_history(
     )
 
     for name in pds_patient_details.name:
+        if name.use == "usual":
+            continue
         historic_first_name_in_pds: str = name.given[0]
         historic_family_name_in_pds = name.family
         if validate_patient_name(

import viewLloydGeorgePayload from '../../../fixtures/requests/GET_LloydGeorgeStitch.json';
import searchPatientPayload from '../../../fixtures/requests/GET_SearchPatient.json';
import { Roles } from '../../../support/roles';
import { formatNhsNumber } from '../../../../src/helpers/utils/formatNhsNumber';

const baseUrl = Cypress.config('baseUrl');
const patientSearchUrl = '/patient/search';

const downloadPageTitle =
    'Download the Lloyd George record for this patient - Access and store digital patient documents';
const downloadingPageTitle = 'Downloading documents - Access and store digital patient documents';
const downloadCompletePageTitle = 'Download complete - Access and store digital patient documents';
const verifyPatientPageTitle =
    'Verify patient details - Access and store digital patient documents';
const lloydGeorgeRecordPageTitle = 'Available records - Access and store digital patient documents';
const testFiles = [
    {
        fileName: '1of2_testy_test.pdf',
        created: '2024-05-07T14:52:00.827602Z',
        virusScannerResult: 'Clean',
        id: 'test-id',
        fileSize: 200,
    },
    {
        fileName: '2of2_testy_test.pdf',
        created: '2024-05-07T14:52:00.827602Z',
        virusScannerResult: 'Clean',
        id: 'test-id-2',
        fileSize: 200,
    },
    {
        fileName: '1of1_lone_test_file.pdf',
        created: '2024-01-01T14:52:00.827602Z',
        virusScannerResult: 'Clean',
        id: 'test-id-3',
        fileSize: 200,
    },
];

const singleTestFile = [
    {
        fileName: '1of1_lone_test_file.pdf',
        created: '2024-01-01T14:52:00.827602Z',
        virusScannerResult: 'Clean',
        id: 'test-id-3',
        fileSize: 200,
    },
];

describe('GP Workflow: View Lloyd George record', () => {
    const beforeEachConfiguration = (role) => {
        cy.login(role);
        cy.visit(patientSearchUrl);

        // search patient
        cy.intercept('GET', '/SearchPatient*', {
            statusCode: 200,
            body: searchPatientPayload,
        }).as('search');
        cy.getByTestId('nhs-number-input').type(searchPatientPayload.nhsNumber);
        cy.getByTestId('search-submit-btn').click();
        cy.wait('@search');
    };

    const setUpDownloadManifestIntercepts = () => {
        let getPollingCount = 0;
        const jobId = 'test-jobId';

        cy.intercept('POST', '/DocumentManifest*', (req) => {
            req.reply({
                statusCode: 200,
                body: { jobId: jobId },
            });
        }).as('documentManifestPost');

        cy.intercept(
            {
                method: 'GET',
                url: '/DocumentManifest*',
                query: {
                    jobId: jobId,
                },
            },
            (req) => {
                getPollingCount += 1;
                if (getPollingCount < 3) {
                    req.reply({
                        statusCode: 200,
                        body: { jobStatus: 'Processing', url: '' },
                    });
                    req.alias = 'documentManifestProcessing';
                } else {
                    req.reply({
                        statusCode: 200,
                        body: { jobStatus: 'Completed', url: baseUrl + '/browserconfig.xml' }, // uses public served file in place of a ZIP file
                    });
                    req.alias = 'documentManifestCompleted';
                }
            },
        );
    };

    const setUpStitchJobIntercepts = () => {
        const initialJobStatus = 'Pending';

        cy.intercept('POST', '/LloydGeorgeStitch*', (req) => {
            req.reply({
                statusCode: 200,
                body: { jobStatus: initialJobStatus },
            });
        }).as('stitchJobPost');

        cy.intercept('GET', '/LloydGeorgeStitch*', (req) => {
            req.reply({
                statusCode: 200,
                body: viewLloydGeorgePayload,
            });
        }).as('stitchJobCompleted');
    };

    const proceedToDownloadSelectionPage = () => {
        setUpStitchJobIntercepts();

        cy.intercept('GET', '/SearchDocumentReferences*', {
            statusCode: 200,
            body: testFiles,
        }).as('searchDocumentReferences');

        cy.get('#verify-submit').click();
        cy.wait('@stitchJobCompleted', { timeout: 20000 });

        cy.getByTestId('download-all-files-link').click();
    };

    context('Download Lloyd George document', () => {
        it(
            'GP ADMIN user can download the entire Lloyd George document of an active patient',
            { tags: 'regression' },
            () => {
                beforeEachConfiguration(Roles.GP_ADMIN);

                setUpStitchJobIntercepts();

                cy.intercept('GET', '/SearchDocumentReferences*', {
                    statusCode: 200,
                    body: testFiles,
                }).as('searchDocumentReferences');

                setUpDownloadManifestIntercepts();

                cy.title().should('eq', verifyPatientPageTitle);

                cy.get('#verify-submit').click();
                cy.wait('@stitchJobCompleted', { timeout: 20000 });
                cy.title().should('eq', lloydGeorgeRecordPageTitle);

                cy.getByTestId('download-all-files-link').should('exist');
                cy.getByTestId('download-all-files-link').click();

                // Select documents page
                cy.title().should('eq', downloadPageTitle);
                cy.wait('@searchDocumentReferences');

                cy.getByTestId('patient-summary').should('exist');

                cy.getByTestId('available-files-table-title').should('exist');
                cy.getByTestId('download-selected-files-btn').should('exist');
                cy.getByTestId('toggle-selection-btn').should('exist');

                cy.getByTestId('toggle-selection-btn').click();
                cy.getByTestId('download-selected-files-btn').click();

                cy.title().should('eq', downloadingPageTitle);

                // Assert contents of page when downloading
                cy.getByTestId('lloyd-george-download-header').should('exist');
                cy.getByTestId('cancel-download-link').should('exist');
                cy.getByTestId('download-file-header-' + testFiles.length + '-files').should(
                    'exist',
                );

                // Assert contents of page after download
                cy.wait('@documentManifestCompleted');
                cy.title().should('eq', downloadCompletePageTitle);
                cy.getByTestId('downloaded-record-card-header').should('exist');
                cy.contains(
                    `${searchPatientPayload.givenName} ${searchPatientPayload.familyName}`,
                ).should('be.visible');
                cy.contains(formatNhsNumber(searchPatientPayload.nhsNumber)).should('be.visible');
                cy.getByTestId('downloaded-files-' + testFiles.length + '-files').should(
                    'not.exist',
                );

                // Assert file has been downloaded
                cy.readFile(`${Cypress.config('downloadsFolder')}/browserconfig.xml`);

                cy.getByTestId('return-btn').click();

                // Assert return button returns to pdf view
                cy.getByTestId('pdf-card').should('be.visible');
            },
        );

        it(
            'GP ADMIN user can selectively download a portion of Lloyd George document of an active patient',
            { tags: 'regression' },
            () => {
                beforeEachConfiguration(Roles.GP_ADMIN);
                setUpDownloadManifestIntercepts();
                proceedToDownloadSelectionPage();

                // Select documents page
                cy.title().should('eq', downloadPageTitle);
                cy.wait('@searchDocumentReferences');

                cy.getByTestId('download-selected-files-btn').should('exist');
                cy.getByTestId('toggle-selection-btn').should('exist');

                cy.getByTestId('checkbox-0').should('exist');
                cy.getByTestId('checkbox-1').should('exist');
                cy.getByTestId('checkbox-2').should('exist');

                cy.getByTestId('checkbox-0').click();
                cy.getByTestId('checkbox-1').click();

                cy.getByTestId('download-selected-files-btn').click();

                // Assert contents of page when downloading
                cy.title().should('eq', downloadingPageTitle);
                // Assert contents of page when downloading
                cy.getByTestId('lloyd-george-download-header').should('exist');
                cy.getByTestId('download-file-header-2-files').should('exist');

                cy.getByTestId('cancel-download-link').should('exist');

                // Assert contents of page after download
                cy.wait('@documentManifestCompleted');
                cy.title().should('eq', downloadCompletePageTitle);
                cy.getByTestId('downloaded-files-card-header').should('exist');
                cy.contains(
                    `${searchPatientPayload.givenName} ${searchPatientPayload.familyName}`,
                ).should('be.visible');
                cy.getByTestId('downloaded-files-2-files').should('exist');

                cy.contains(formatNhsNumber(searchPatientPayload.nhsNumber)).should('be.visible');

                // Assert file has been downloaded
                cy.readFile(`${Cypress.config('downloadsFolder')}/browserconfig.xml`);

                cy.getByTestId('return-btn').click();

                // Assert return button returns to pdf view
                cy.getByTestId('pdf-card').should('be.visible');
            },
        );

        it(
            'GP ADMIN user can download entire Lloyd George document when single file',
            { tags: 'regression' },
            () => {
                beforeEachConfiguration(Roles.GP_ADMIN);

                setUpStitchJobIntercepts();

                cy.intercept('GET', '/SearchDocumentReferences*', {
                    statusCode: 200,
                    body: singleTestFile,
                }).as('searchDocumentReferences');

                setUpDownloadManifestIntercepts();

                cy.title().should('eq', verifyPatientPageTitle);

                cy.get('#verify-submit').click();
                cy.wait('@stitchJobCompleted', { timeout: 20000 });
                cy.title().should('eq', lloydGeorgeRecordPageTitle);

                cy.getByTestId('download-all-files-link').should('exist');
                cy.getByTestId('download-all-files-link').click();

                // Select documents page
                cy.title().should('eq', downloadPageTitle);
                cy.wait('@searchDocumentReferences');

                cy.getByTestId('patient-summary').should('exist');

                cy.getByTestId('available-files-table-title').should('exist');
                cy.getByTestId('download-file-btn').should('exist');

                cy.getByTestId('download-file-btn').click();

                // Assert contents of page when downloading
                cy.title().should('eq', downloadingPageTitle);
                // Assert contents of page when downloading
                cy.getByTestId('lloyd-george-download-header').should('exist');
                cy.getByTestId('download-file-header-1-files').should('exist');

                cy.getByTestId('cancel-download-link').should('exist');

                // Assert contents of page after download
                cy.wait('@documentManifestCompleted');
                cy.title().should('eq', downloadCompletePageTitle);
                cy.getByTestId('downloaded-record-card-header').should('exist');
                cy.contains(
                    `${searchPatientPayload.givenName} ${searchPatientPayload.familyName}`,
                ).should('be.visible');

                cy.contains(formatNhsNumber(searchPatientPayload.nhsNumber)).should('be.visible');

                // Assert file has been downloaded
                cy.readFile(`${Cypress.config('downloadsFolder')}/browserconfig.xml`);

                cy.getByTestId('return-btn').click();

                // Assert return button returns to pdf view
                cy.getByTestId('pdf-card').should('be.visible');
            },
        );

        it(
            'should display an alert if user click "Download selected files" without selecting anything',
            { tags: 'regression' },
            () => {
                beforeEachConfiguration(Roles.GP_ADMIN);
                setUpDownloadManifestIntercepts();
                proceedToDownloadSelectionPage();

                // Select documents page
                cy.title().should('eq', downloadPageTitle);
                cy.wait('@searchDocumentReferences');

                cy.getByTestId('download-selected-files-btn').should('exist');
                cy.getByTestId('download-selected-files-btn').click();

                cy.title().should('not.equal', downloadingPageTitle);
                cy.title().should('equal', downloadPageTitle);

                cy.get('#error-box-summary').should('be.visible');
                cy.get('.nhsuk-error-summary__body').should('be.visible');
                cy.getByTestId('download-selection-error-box').should('exist');
            },
        );

        it('should display an error page when download manifest API responded with PENDING for 3 times', () => {
            let pendingCounts = 0;
            beforeEachConfiguration(Roles.GP_ADMIN);

            cy.intercept('POST', '/DocumentManifest*', (req) => {
                req.reply({
                    statusCode: 200,
                    body: { jobId: 'testJobId' },
                });
            }).as('documentManifestPost');

            cy.intercept('GET', '/DocumentManifest*', (req) => {
                pendingCounts += 1;
                req.reply({
                    statusCode: 200,
                    body: { jobStatus: 'Pending' },
                });
                if (pendingCounts >= 3) {
                    req.alias = 'documentManifestThirdTimePending';
                }
            });

            proceedToDownloadSelectionPage();

            cy.wait('@searchDocumentReferences');

            cy.getByTestId('toggle-selection-btn').click();
            cy.getByTestId('download-selected-files-btn').click();

            cy.wait('@documentManifestThirdTimePending');

            cy.title().should('have.string', 'Service error');
            cy.url().should('have.string', '/server-error?encodedError=');
        });

        it(
            'No download option when no Lloyd George record exists for a patient as a GP ADMIN role',
            { tags: 'regression' },
            () => {
                beforeEachConfiguration(Roles.GP_ADMIN);

                cy.intercept('POST', '/LloydGeorgeStitch*', (req) => {
                    req.reply({
                        statusCode: 404,
                    });
                }).as('stitchJobPostEmpty');

                cy.get('#verify-submit').click();
                cy.wait('@stitchJobPostEmpty', { timeout: 20000 });

                cy.getByTestId('download-all-files-link').should('not.exist');
            },
        );

        it(
            'No download option exists when a Lloyd George record exists for the patient as a GP CLINICAL role',
            { tags: 'regression' },
            () => {
                beforeEachConfiguration(Roles.GP_CLINICAL);

                setUpStitchJobIntercepts();

                cy.get('#verify-submit').click();
                cy.wait('@stitchJobCompleted', { timeout: 20000 });

                cy.getByTestId('download-all-files-link').should('not.exist');
            },
        );

        it.skip(
            'It displays an error when the document manifest API call fails as a GP CLINICAL role',
            { tags: 'regression' },
            () => {
                setUpStitchJobIntercepts();

                cy.intercept('GET', '/DocumentManifest*', {
                    statusCode: 500,
                }).as('documentManifest');

                beforeEachConfiguration(Roles.GP_CLINICAL);

                cy.get('#verify-submit').click();
                cy.wait('@stitchJobCompleted', { timeout: 20000 });

                cy.getByTestId('download-all-files-link').should('exist');
                cy.getByTestId('download-all-files-link').click();

                cy.wait('@documentManifest');

                // Assert
                cy.contains(
                    'appropriate error for when the document manifest API call fails',
                ).should('be.visible');
            },
        );
    });
});
import { act, render, screen, waitFor } from '@testing-library/react';
import React from 'react';
import { buildPatientDetails, buildSearchResult } from '../../../../helpers/test/testBuilders';
import usePatient from '../../../../helpers/hooks/usePatient';
import { LinkProps } from 'react-router-dom';
import LloydGeorgeSelectSearchResults, { Props } from './LloydGeorgeSelectSearchResults';
import userEvent from '@testing-library/user-event';
import { SEARCH_AND_DOWNLOAD_STATE } from '../../../../types/pages/documentSearchResultsPage/types';
import { runAxeTest } from '../../../../helpers/test/axeTestHelper';

jest.mock('../../../../helpers/hooks/usePatient');
jest.mock('react-router-dom', () => ({
    Link: (props: LinkProps) => <a {...props} role="link" />,
    useNavigate: () => mockNavigate,
}));

window.scrollTo = jest.fn() as jest.Mock;
const mockPatient = buildPatientDetails();
const mockedUsePatient = usePatient as jest.Mock;
const mockNavigate = jest.fn();
const mockSetSelectedDocuments = jest.fn();
const mockSetSubmissionSearchState = jest.fn();
const mockSelectedDocuments = ['test-id-1', 'test-id-2'];
const searchResults = [
    buildSearchResult({ fileName: '1of2_test.pdf', ID: 'test-id-1' }),
    buildSearchResult({ fileName: '2of2_test.pdf', ID: 'test-id-2' }),
    buildSearchResult({ fileName: '1of1_test.pdf', ID: 'test-id-3' }),
];
const searchResultOneFileOnly = [searchResults[0]];
const mockAllSelectedDocuments = [searchResults[2].ID, searchResults[0].ID, searchResults[1].ID];

describe('LloydGeorgeSelectSearchResults', () => {
    beforeEach(() => {
        process.env.REACT_APP_ENVIRONMENT = 'jest';
        mockedUsePatient.mockReturnValue(mockPatient);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('Rendering', () => {
        it('renders the page', () => {
            renderComponent();

            expect(
                screen.getByRole('heading', {
                    name: 'Download the Lloyd George record for this patient',
                }),
            ).toBeInTheDocument();
            expect(screen.getByTestId('available-files-table-title')).toBeInTheDocument();
            expect(screen.getByTestId('search-result-0')).toBeInTheDocument();
            expect(screen.getByTestId('search-result-1')).toBeInTheDocument();
            expect(screen.getAllByRole('checkbox')).toHaveLength(searchResults.length);
            expect(screen.getByTestId('patient-summary')).toBeInTheDocument();
            expect(screen.getByTestId('download-selected-files-btn')).toBeInTheDocument();
            expect(screen.getByTestId('toggle-selection-btn')).toBeInTheDocument();
        });

        it('renders the correct table headers', () => {
            renderComponent({ selectedDocuments: mockSelectedDocuments });

            const headers = screen.getAllByRole('columnheader');
            const expectedHeaders = ['Selected', 'Filename', 'Upload date', 'File size'];

            expectedHeaders.forEach((headerText, index) => {
                expect(headers[index]).toHaveTextContent(headerText);
            });

            const filesTable = screen.getByTestId('available-files-table-title');
            expect(filesTable).toHaveTextContent(/bytes|KB|MB|GB/);
        });

        it('shows error box when download selected files button is clicked but no files selected', async () => {
            renderComponent({ selectedDocuments: [] });

            act(() => {
                userEvent.click(screen.getByTestId('download-selected-files-btn'));
            });

            await waitFor(() => {
                expect(screen.getByTestId('download-selection-error-box')).toBeInTheDocument();
            });
            expect(window.scrollTo).toHaveBeenCalledWith(0, 0);
        });

        it('add documentId to selectedDocument when checkbox is checked', async () => {
            renderComponent({ selectedDocuments: mockSelectedDocuments });
            const expectedSelectedDocument = [...mockSelectedDocuments, searchResults[2].ID];

            const checkbox = screen.getByRole('checkbox', { name: searchResults[2].fileName });
            expect(checkbox).not.toBeChecked();

            act(() => {
                userEvent.click(checkbox);
            });
            expect(mockSetSelectedDocuments).toBeCalledWith(expectedSelectedDocument);
        });

        it('remove documentId from selectedDocument when a checkbox is unchecked', async () => {
            renderComponent({ selectedDocuments: mockSelectedDocuments });
            const expectedSelectedDocument = mockSelectedDocuments.filter(
                (id) => id !== searchResults[0].ID,
            );

            const checkbox = screen.getByRole('checkbox', { name: searchResults[0].fileName });
            expect(checkbox).toBeChecked();

            act(() => {
                userEvent.click(checkbox);
            });
            expect(mockSetSelectedDocuments).toBeCalledWith(expectedSelectedDocument);
        });

        it('does not render checkbox and `download selected file` button when there is only one file in search result', async () => {
            renderComponent({ searchResults: searchResultOneFileOnly, selectedDocuments: [] });

            expect(screen.getByTestId('search-result-0')).toBeInTheDocument();
            expect(screen.queryByRole('checkbox')).not.toBeInTheDocument();
            expect(screen.queryByTestId('download-selected-files-btn')).not.toBeInTheDocument();
            expect(screen.getByTestId('download-file-btn')).toBeInTheDocument();
            expect(screen.queryByTestId('toggle-selection-btn')).not.toBeInTheDocument();
        });

        describe('Toggle select all button', () => {
            it('checks all checkboxes are checked when select all files button is clicked, no files previously checked', async () => {
                let selectedDocuments: Array<string> = [];
                mockSetSelectedDocuments.mockImplementation(
                    (documents) => (selectedDocuments = documents),
                );

                const { rerender } = renderComponent({ selectedDocuments: [] });
                const toggleSelectAllBtn = screen.getByTestId('toggle-selection-btn');
                const checkboxes = screen.getAllByRole('checkbox');

                act(() => {
                    userEvent.click(toggleSelectAllBtn);
                });

                expect(mockSetSelectedDocuments).toBeCalledWith(mockAllSelectedDocuments);

                const props: Props = {
                    searchResults: searchResults,
                    setSubmissionSearchState: mockSetSubmissionSearchState,
                    selectedDocuments: selectedDocuments,
                    setSelectedDocuments: mockSetSelectedDocuments,
                };

                rerender(<LloydGeorgeSelectSearchResults {...props} />);

                checkboxes.forEach((checkbox) => {
                    expect(checkbox).toBeChecked();
                });

                expect(toggleSelectAllBtn).toHaveTextContent('Deselect all files');
                expect(toggleSelectAllBtn).toHaveTextContent('All files are selected');
            });

            it('check all checkboxes unchecked, when select all files button clicked, all files previously checked', () => {
                let selectedDocuments = mockAllSelectedDocuments;
                mockSetSelectedDocuments.mockImplementation(
                    (documents) => (selectedDocuments = documents),
                );

                const { rerender } = renderComponent({
                    selectedDocuments: mockAllSelectedDocuments,
                });
                const toggleSelectAllBtn = screen.getByTestId('toggle-selection-btn');
                const checkboxes = screen.getAllByRole('checkbox');

                checkboxes.forEach((checkbox) => {
                    expect(checkbox).toBeChecked();
                });

                expect(toggleSelectAllBtn).toHaveTextContent('Deselect all files');
                expect(toggleSelectAllBtn).toHaveTextContent('All files are selected');

                act(() => {
                    userEvent.click(toggleSelectAllBtn);
                });

                expect(mockSetSelectedDocuments).toBeCalledWith([]);

                const props: Props = {
                    searchResults: searchResults,
                    setSubmissionSearchState: mockSetSubmissionSearchState,
                    selectedDocuments: selectedDocuments,
                    setSelectedDocuments: mockSetSelectedDocuments,
                };

                rerender(<LloydGeorgeSelectSearchResults {...props} />);

                checkboxes.forEach((checkbox) => {
                    expect(checkbox).not.toBeChecked();
                });
                expect(toggleSelectAllBtn).toHaveTextContent('Select all files');
                expect(toggleSelectAllBtn).toHaveTextContent('All files are deselected');
            });

            it('check all checkboxes unchecked, when select all files button clicked twice, no files previously checked', () => {
                const props: Props = {
                    searchResults: searchResults,
                    setSubmissionSearchState: mockSetSubmissionSearchState,
                    selectedDocuments: [],
                    setSelectedDocuments: mockSetSelectedDocuments,
                };
                mockSetSelectedDocuments.mockImplementation(
                    (documents) => (props.selectedDocuments = documents),
                );

                const { rerender } = renderComponent(props);
                const toggleSelectAllBtn = screen.getByTestId('toggle-selection-btn');
                const checkboxes = screen.getAllByRole('checkbox');

                act(() => {
                    userEvent.click(toggleSelectAllBtn);
                });

                rerender(<LloydGeorgeSelectSearchResults {...props} />);

                act(() => {
                    userEvent.click(toggleSelectAllBtn);
                });

                expect(mockSetSelectedDocuments).toBeCalledWith([]);

                rerender(<LloydGeorgeSelectSearchResults {...props} />);

                checkboxes.forEach((checkbox) => {
                    expect(checkbox).not.toBeChecked();
                });
                expect(toggleSelectAllBtn).toHaveTextContent('Select all files');
                expect(toggleSelectAllBtn).toHaveTextContent('All files are deselected');
            });
        });
    });

    describe('Accessibility', () => {
        it('pass accessibility checks at page entry point', async () => {
            renderComponent();

            const results = await runAxeTest(document.body);
            expect(results).toHaveNoViolations();
        });

        it('pass accessibility checks when error box shows up', async () => {
            renderComponent({ selectedDocuments: [] });

            act(() => {
                userEvent.click(screen.getByTestId('download-selected-files-btn'));
            });

            await waitFor(expect(screen.getByRole('alert')).toBeInTheDocument);

            const results = await runAxeTest(document.body);
            expect(results).toHaveNoViolations();
        });

        it('check all checkboxes have aria-checked attribute', () => {
            renderComponent();
            const allCheckBoxes = screen.getAllByRole('checkbox');

            allCheckBoxes.forEach((checkbox) => {
                expect(checkbox).toHaveAttribute('aria-checked');
            });
        });
        it('checkbox has aria-checked attribute reflecting the checkbox status', () => {
            const props: Props = {
                searchResults: searchResults,
                setSubmissionSearchState: mockSetSubmissionSearchState,
                selectedDocuments: [],
                setSelectedDocuments: mockSetSelectedDocuments,
            };
            mockSetSelectedDocuments.mockImplementation(
                (documents) => (props.selectedDocuments = documents),
            );

            const { rerender } = renderComponent(props);
            const firstCheckBox = screen.getByTestId('checkbox-0');

            expect(firstCheckBox).toHaveAttribute('aria-checked', 'false');

            act(() => {
                userEvent.click(firstCheckBox);
            });

            rerender(<LloydGeorgeSelectSearchResults {...props} />);

            expect(firstCheckBox).toHaveAttribute('aria-checked', 'true');

            act(() => {
                userEvent.click(firstCheckBox);
            });

            rerender(<LloydGeorgeSelectSearchResults {...props} />);

            expect(firstCheckBox).toHaveAttribute('aria-checked', 'false');
        });

        it('toggle select all button has status announcements associated with it', () => {
            renderComponent();
            const toggleSelectAllBtn = screen.getByTestId('toggle-selection-btn');
            const announcement = screen.getByTestId('toggle-selection-btn-announcement');
            expect(toggleSelectAllBtn).toContainElement(announcement);
        });
    });

    describe('Navigation', () => {
        it('sets submission state when download selected files button is clicked and not all files selected', () => {
            renderComponent();

            act(() => {
                userEvent.click(screen.getByTestId('download-selected-files-btn'));
            });

            expect(mockSetSubmissionSearchState).toHaveBeenCalledWith(
                SEARCH_AND_DOWNLOAD_STATE.DOWNLOAD_SELECTED,
            );
        });

        it('sets submission state and empties selected docs array when download selected files button is clicked but all files selected', () => {
            renderComponent({ selectedDocuments: ['test-id-1', 'test-id-2', 'test-id-3'] });

            act(() => {
                userEvent.click(screen.getByTestId('download-selected-files-btn'));
            });

            expect(mockSetSelectedDocuments).toHaveBeenCalledWith([]);
            expect(mockSetSubmissionSearchState).toHaveBeenCalledWith(
                SEARCH_AND_DOWNLOAD_STATE.DOWNLOAD_SELECTED,
            );
        });
    });
});

const renderComponent = (propsOverride: Partial<Props> = {}) => {
    const props: Props = {
        searchResults: searchResults,
        setSubmissionSearchState: mockSetSubmissionSearchState,
        selectedDocuments: mockSelectedDocuments,
        setSelectedDocuments: mockSetSelectedDocuments,
        ...propsOverride,
    };
    return render(<LloydGeorgeSelectSearchResults {...props} />);
};
import { Button, Checkboxes, Table } from 'nhsuk-react-components';
import { SearchResult } from '../../../../types/generic/searchResult';
import { getFormattedDatetime } from '../../../../helpers/utils/formatDatetime';
import { useNavigate } from 'react-router-dom';
import { routeChildren } from '../../../../types/generic/routes';
import React, { Dispatch, ReactNode, SetStateAction, SyntheticEvent, useState } from 'react';
import { SEARCH_AND_DOWNLOAD_STATE } from '../../../../types/pages/documentSearchResultsPage/types';
import ErrorBox from '../../../layout/errorBox/ErrorBox';
import PatientSummary from '../../../generic/patientSummary/PatientSummary';
import BackButton from '../../../generic/backButton/BackButton';
import formatFileSize from '../../../../helpers/utils/formatFileSize';

export type Props = {
    searchResults: Array<SearchResult>;
    setSubmissionSearchState: Dispatch<SetStateAction<SEARCH_AND_DOWNLOAD_STATE>>;
    setSelectedDocuments: Dispatch<React.SetStateAction<Array<string>>>;
    selectedDocuments: Array<string>;
};

type AvailableFilesTableProps = {
    tableCaption: ReactNode;
    searchResults: Array<SearchResult>;
    setSelectedDocuments: Dispatch<React.SetStateAction<Array<string>>>;
    selectedDocuments: Array<string>;
    allowSelectDocument: boolean;
};

const AvailableFilesTable = ({
    tableCaption,
    searchResults,
    selectedDocuments,
    setSelectedDocuments,
    allowSelectDocument,
}: AvailableFilesTableProps) => {
    const toggleSelectAllFilesToDownload = () => {
        if (selectedDocuments.length < searchResults.length) {
            const downloadableItems: string[] = [];
            searchResults.forEach((result) => {
                downloadableItems.push(result.ID);
            });
            setSelectedDocuments(downloadableItems);
        } else {
            setSelectedDocuments([]);
        }
    };
    const handleChangeCheckboxes = (e: SyntheticEvent<HTMLInputElement>) => {
        const target = e.target as HTMLInputElement;
        const toggledDocumentId = target.value;
        if (target.checked) {
            setSelectedDocuments([...selectedDocuments, toggledDocumentId]);
        } else {
            setSelectedDocuments(selectedDocuments.filter((id) => id !== toggledDocumentId));
        }
    };

    const getToggleButtonAriaDescription = () => {
        if (selectedDocuments.length === searchResults.length) {
            return 'Toggle selection button, Click to deselect all files';
        } else {
            return 'Toggle selection button, Click to select all files';
        }
    };

    const getToggleButtonStatusChange = () => {
        if (selectedDocuments.length === searchResults.length) {
            return 'All files are selected';
        } else if (selectedDocuments.length === 0) {
            return 'All files are deselected';
        }
    };

    return (
        <>
            {tableCaption}
            {allowSelectDocument && (
                <div>
                    <Button
                        onClick={toggleSelectAllFilesToDownload}
                        secondary={true}
                        data-testid="toggle-selection-btn"
                        type="button"
                        aria-description={getToggleButtonAriaDescription()}
                    >
                        <span>
                            {selectedDocuments.length === searchResults.length &&
                                'Deselect all files'}
                            {selectedDocuments.length < searchResults.length && 'Select all files'}
                        </span>
                        <output
                            data-testid="toggle-selection-btn-announcement"
                            className="nhsuk-u-visually-hidden"
                        >
                            {getToggleButtonStatusChange()}
                        </output>
                    </Button>
                    <p>Or select individual files</p>
                </div>
            )}

            <Table
                id="available-files-table-title"
                data-testid="available-files-table-title"
                aria-label="List of files in record"
            >
                <Table.Head>
                    <Table.Row>
                        {allowSelectDocument && (
                            <Table.Cell className={'table-column-header'}>Selected</Table.Cell>
                        )}
                        <Table.Cell className={'table-column-header'}>Filename</Table.Cell>
                        <Table.Cell className={'table-column-header'}>Upload date</Table.Cell>
                        <Table.Cell className={'table-column-header'}>File size</Table.Cell>
                    </Table.Row>
                </Table.Head>
                <Table.Body>
                    {searchResults.map((result, index) => (
                        <Table.Row
                            className="available-files-row"
                            id={`search-result-${index}`}
                            key={`document-${result.fileName + result.created}`}
                            data-testid={`search-result-${index}`}
                        >
                            {allowSelectDocument && (
                                <Table.Cell id={`selected-files-row-${index}`}>
                                    <Checkboxes onChange={handleChangeCheckboxes}>
                                        <Checkboxes.Box
                                            value={result.ID}
                                            id={result.ID}
                                            data-testid={`checkbox-${index}`}
                                            checked={selectedDocuments.includes(result.ID)}
                                            aria-checked={selectedDocuments.includes(result.ID)}
                                        >
                                            <span className="nhsuk-u-visually-hidden">
                                                {result.fileName}
                                            </span>
                                        </Checkboxes.Box>
                                    </Checkboxes>
                                </Table.Cell>
                            )}
                            <Table.Cell
                                id={'available-files-row-' + index + '-filename'}
                                data-testid="filename"
                            >
                                {result.fileName}
                            </Table.Cell>
                            <Table.Cell
                                id={'available-files-row-' + index + '-created-date'}
                                data-testid="created"
                            >
                                {getFormattedDatetime(new Date(result.created))}
                            </Table.Cell>
                            <Table.Cell
                                id={'available-files-row-' + index + '-file-size'}
                                data-testid="file-size"
                            >
                                {formatFileSize(result.fileSize)}
                            </Table.Cell>
                        </Table.Row>
                    ))}
                </Table.Body>
            </Table>
        </>
    );
};

const LloydGeorgeSelectSearchResults = ({
    searchResults,
    setSubmissionSearchState,
    setSelectedDocuments,
    selectedDocuments,
}: Props) => {
    const sortByFileName = (a: SearchResult, b: SearchResult) => {
        const fileNumberOfA = parseInt(a.fileName.substring(0, a.fileName.indexOf('of')));
        const fileNumberOfB = parseInt(b.fileName.substring(0, a.fileName.indexOf('of')));
        if (fileNumberOfA && fileNumberOfB) {
            return fileNumberOfA > fileNumberOfB ? 1 : -1;
        } else {
            return a.fileName > b.fileName ? 1 : -1;
        }
    };
    const navigate = useNavigate();
    const orderedResults = [...searchResults].sort(sortByFileName);
    const tableCaption = <h2 className="nhsuk-heading-l">List of files in record</h2>;
    const [showNoOptionSelectedMessage, setShowNoOptionSelectedMessage] = useState<boolean>(false);
    const noOptionSelectedError = 'You must select a file to download or download all files';
    const pageHeader = 'Download the Lloyd George record for this patient';

    const allowSelectDocument = searchResults.length > 1;

    const handleClickSelectedDownload = () => {
        if (selectedDocuments.length === searchResults.length) {
            handleClickDownloadAll();
        } else if (selectedDocuments.length) {
            setSubmissionSearchState(SEARCH_AND_DOWNLOAD_STATE.DOWNLOAD_SELECTED);
            navigate(routeChildren.LLOYD_GEORGE_DOWNLOAD_IN_PROGRESS);
        } else {
            setShowNoOptionSelectedMessage(true);
            window.scrollTo(0, 0);
        }
    };
    const handleClickDownloadAll = () => {
        setSelectedDocuments([]);
        setSubmissionSearchState(SEARCH_AND_DOWNLOAD_STATE.DOWNLOAD_SELECTED);
        navigate(routeChildren.LLOYD_GEORGE_DOWNLOAD_IN_PROGRESS);
    };

    return (
        <>
            <BackButton />
            {showNoOptionSelectedMessage && (
                <ErrorBox
                    messageTitle={'There is a problem'}
                    messageLinkBody={noOptionSelectedError}
                    errorBoxSummaryId={'error-box-summary'}
                    errorInputLink={'#available-files-table-title'}
                    dataTestId={'download-selection-error-box'}
                />
            )}
            <h1 id="download-page-title">{pageHeader}</h1>
            <PatientSummary />
            <AvailableFilesTable
                tableCaption={tableCaption}
                searchResults={orderedResults}
                selectedDocuments={selectedDocuments}
                setSelectedDocuments={setSelectedDocuments}
                allowSelectDocument={allowSelectDocument}
            />
            <div className="align-baseline gap-4">
                {allowSelectDocument && (
                    <Button
                        onClick={handleClickSelectedDownload}
                        data-testid="download-selected-files-btn"
                    >
                        Download selected files
                    </Button>
                )}
                {!allowSelectDocument && (
                    <Button onClick={handleClickDownloadAll} data-testid="download-file-btn">
                        Download
                    </Button>
                )}
            </div>
        </>
    );
};

export default LloydGeorgeSelectSearchResults;
import {
    DOCUMENT_TYPE,
    DOCUMENT_UPLOAD_STATE,
    UploadDocument,
    DOCUMENT_UPLOAD_STATE as documentUploadStates,
} from '../../types/pages/UploadDocumentsPage/types';
import { PatientDetails } from '../../types/generic/patientDetails';
import { SearchResult } from '../../types/generic/searchResult';
import { UserAuth } from '../../types/blocks/userAuth';
import { LloydGeorgeStitchResult } from '../requests/getLloydGeorgeRecord';
import { REPOSITORY_ROLE } from '../../types/generic/authRole';
import { v4 as uuidv4 } from 'uuid';
import moment from 'moment';
import { GlobalConfig, LocalFlags } from '../../providers/configProvider/ConfigProvider';
import { FeatureFlags } from '../../types/generic/featureFlags';
import { UploadSession } from '../../types/generic/uploadResult';

const buildUserAuth = (userAuthOverride?: Partial<UserAuth>) => {
    const auth: UserAuth = {
        role: REPOSITORY_ROLE.GP_ADMIN,
        isBSOL: false,
        authorisation_token: '111xxx222',
        ...userAuthOverride,
    };
    return auth;
};

const buildPatientDetails = (patientDetailsOverride?: Partial<PatientDetails>) => {
    const patient: PatientDetails = {
        birthDate: '1970-01-01',
        familyName: 'Doe',
        givenName: ['John'],
        nhsNumber: '9000000009',
        postalCode: 'BS3 3NQ',
        superseded: false,
        restricted: false,
        active: true,
        ...patientDetailsOverride,
    };

    return patient;
};

const buildTextFile = (name: string, size?: number) => {
    const file = new File(['test'], `${name}.txt`, {
        type: 'text/plain',
    });

    if (size) {
        Object.defineProperty(file, 'size', {
            value: size,
        });
    }

    return file;
};

const buildLgFile = (
    fileNumber: number,
    numberOfFiles: number,
    patientname: string,
    size?: number,
    nhs_number: string = '9000000009',
    dob: string = '01-01-1970',
) => {
    const file = new File(
        ['test'],
        `${fileNumber}of${numberOfFiles}_Lloyd_George_Record_[${patientname}]_[${nhs_number}]_[${dob}].pdf`,
        {
            type: 'application/pdf',
        },
    );

    if (size) {
        Object.defineProperty(file, 'size', {
            value: size,
        });
    }

    return file;
};

const buildDocument = (
    file: File,
    uploadStatus: DOCUMENT_UPLOAD_STATE,
    docType?: DOCUMENT_TYPE,
) => {
    const mockDocument: UploadDocument = {
        file,
        state: uploadStatus ?? documentUploadStates.SUCCEEDED,
        progress: 0,
        id: uuidv4(),
        docType: docType ?? DOCUMENT_TYPE.ARF,
        attempts: 0,
    };
    return mockDocument;
};

const buildUploadSession = (documents: Array<UploadDocument>) => {
    return documents.reduce(
        (acc, doc) => ({
            ...acc,
            [doc.id]: {
                fields: {
                    key: `bucket/sub_folder/uuid_for_file(${doc.file.name})`,
                    'x-amz-algorithm': 'string',
                    'x-amz-credential': 'string',
                    'x-amz-date': 'string',
                    'x-amz-security-token': 'string',
                    policy: 'string',
                    'x-amz-signature': 'string',
                },
                url: 'https://test.s3.com',
            },
        }),
        {} as UploadSession,
    );
};

const buildSearchResult = (searchResultOverride?: Partial<SearchResult>) => {
    const result: SearchResult = {
        fileName: 'fileName.pdf',
        created: moment().format(),
        virusScannerResult: 'Clean',
        ID: '1234qwer-241ewewr',
        fileSize: 224,
        ...searchResultOverride,
    };
    return result;
};

const buildLgSearchResult = () => {
    const result: LloydGeorgeStitchResult = {
        jobStatus: 'Completed',
        numberOfFiles: 7,
        totalFileSizeInBytes: 7,
        lastUpdated: '2023-10-03T09:11:54.618694Z',
        presignedUrl: 'https://test-url',
    };
    return result;
};

const buildConfig = (
    localFlagsOverride?: Partial<LocalFlags>,
    featureFlagsOverride?: Partial<FeatureFlags>,
) => {
    const globalConfig: GlobalConfig = {
        mockLocal: {
            isBsol: true,
            recordUploaded: true,
            userRole: REPOSITORY_ROLE.GP_ADMIN,
            ...localFlagsOverride,
        },
        featureFlags: {
            uploadLloydGeorgeWorkflowEnabled: false,
            uploadLambdaEnabled: false,
            uploadArfWorkflowEnabled: false,
            ...featureFlagsOverride,
        },
    };

    return globalConfig;
};

export {
    buildPatientDetails,
    buildTextFile,
    buildDocument,
    buildSearchResult,
    buildLgSearchResult,
    buildUserAuth,
    buildLgFile,
    buildConfig,
    buildUploadSession,
};
export type SearchResult = {
    fileName: string;
    created: string;
    virusScannerResult: string;
    ID: string;
    fileSize: number;
};
