import os 
import subprocess 
import shutil

PDFJS_REPO = "https://github.com/mozilla/pdf.js"
PDFJS_VERSION = "v4.10.38"
PUBLIC_DIR = "./app/public/pdfjs"
LOCAL_DIR = "local_pdfjs/pdf.js-4.10.38"
TEMP_DIR = "temp_pdfjs"


def clone_pdfjs_to_temp_dir():
    
    print_message(f"cloning pdf.js tag version: {PDFJS_VERSION}" )

    if os.path.exists(LOCAL_DIR):
        print_message( "using local clone" )
        shutil.copytree( LOCAL_DIR, TEMP_DIR, dirs_exist_ok=True )
    else:

        subprocess.run(
            [ "git", "clone", "--branch", PDFJS_VERSION, "--depth", "1", PDFJS_REPO, TEMP_DIR ],
            check=True
        )


def build_pdfjs_in_temp_dir():
    
    print_message( "building pdf.js" )

    subprocess.run( [ "npm", "install" ], cwd=TEMP_DIR, check=True )
    subprocess.run( [ "npx", "gulp", "generic" ], cwd=TEMP_DIR, check=True )        # generic || minified


def copy_build_to_app_public(): 

    print_message(f"copying to {PUBLIC_DIR}" )

    if not os.path.exists(PUBLIC_DIR):
        os.makedirs( PUBLIC_DIR )

    build_dir = os.path.join( TEMP_DIR, "build")

    shutil.copytree( build_dir, os.path.join( PUBLIC_DIR, "build" ), dirs_exist_ok=True )


def clean_up():
    
    print_message(f"cleaning {TEMP_DIR}/" )

    shutil.rmtree( TEMP_DIR, ignore_errors=True )


def print_message(message):
    print(f"\n -- { message }\n" )


if __name__ == "__main__":
    
    try:

        clone_pdfjs_to_temp_dir()
        build_pdfjs_in_temp_dir()
        copy_build_to_app_public()

    finally:

        print_message( "finally" )
#        clean_up()



# we have to add the build/ to the gitignore to add


















import React, { useEffect } from 'react';

type Props = { fileUrl: string };

const PdfViewer = ({ fileUrl }: Props) => {

    if (!fileUrl) return null;

    return (

        <iframe 
            id="pdf-viewer"
            data-testid="pdf-viewer"
            tabIndex={0}
            src={`/pdfjs/build/generic/web/viewer.html?file=${encodeURIComponent(fileUrl)}`}
            title="Embedded PDF Viewer"
        />

    );
};

export default PdfViewer;
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
.pip_cache/
package/

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
app/mochawesome-report/
app/mochawesomemerged.json

# Translations
*.mo
*.pot

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/


# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

**/.DS_Store
.terraform.lock.hcl
tfplan

node_modules/
*.zip
.idea/
.vscode/

lambdas/tests/unit/helpers/data/pdf/tmp
/lambdas/package_/

batch_update_progress.json

# jupyter notebook files
*.ipynb