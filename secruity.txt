


----------------------------------------------------------------------------------------------------------------------------


/auth-callback?code=FHO_xdVc0zR5SfhnS4sWw-t2nXQ&iss=https%3A%2F%2Fam.nhsdev.auth-ptl.cis2.spineservices.nhs.uk%3A443%2Fopenam%2Foauth2%2Frealms%2Froot%2Frealms%2Foidc&state=WGJkZt8xYLc1veER3DGtByPeeXhboO&client_id=277214098809.apps.supplier:1 

Refused to load the image 

'blob:https://ndra.access-request-fulfilment.patient-deductions.nhs.uk/d49baf88-205f-4e23-a64d-5bc7a5e755e0' 

because it violates the following Content Security Policy directive: "img-src 'self'".

--
--

img-src 'self' blob;

pdf.js converts the original file url into blob urls internally to render the pdf document in parts,
for efficent loading and rendering.

allows the app to internally use blob urls

this setting does not change the exsisting s3 urls to type blob or allow external resources.
the use of blob urls is limited to internal use and can only point to internal resources

to add:
from
Content-Security-Policy: img-src 'self';
to
Content-Security-Policy: img-src 'self' blob:;

----------------------------------------------------------------------------------------------------------------------------


Refused to frame 

'https://ndra.access-request-fulfilment.patient-deductions.nhs.uk/' 

because an ancestor violates the following Content Security Policy directive: "frame-ancestors 'none'".

--
--

frame-ancestors 'self' 

ensures an iframe's ancestor (the page embedding it) is located at the same location 
(same origin: domain, protocol, port / server)

allows parts of the react app ( public/pdfjs ) to be embedded by other parts of our system that are at the same
location, which is effectifly only the rest of the react app
(same origin: domain, protocol, port / server)

and cannot be iframed embedded by applications at other location
for example another website tries to embedd our react app 

to add:
from
Content-Security-Policy: frame-ancestors 'none';
to
Content-Security-Policy: frame-ancestors 'self';


----------------------------------------------------------------------------------------------------------------------------

sandbox="allow-scripts allow-same-origin allow-popups"
letsrun pdfjs run its own js , 
use origin-restricted resources , allows pdfjs to fetch the 3s url, and use its own cookies and ...
open document links in new tabs, not in the iframe . minimizes attack surfaces.


----------------------------------------------------------------------------------------------------------------------------

increase the presigned url expiration time for large giles to avoid timeouts

cloudfront
api gateway
s3 bucket hosting configuration





---------------------------------

Image Loading Error
Error:

vbnet
Copy code
Refused to load the image 'blob:...' because it violates the following Content Security Policy directive: "img-src 'self'".
Explanation:

Cause: PDF.js converts the original file URL into blob: URLs internally for efficient loading and rendering in parts.
Solution: Allow the app to internally use blob: URLs.
This does not alter existing S3 URLs or allow external resources.
Blob URLs are restricted to internal use and cannot point to external sources.
CSP Update:

From:
css
Copy code
Content-Security-Policy: img-src 'self';
To:
css
Copy code
Content-Security-Policy: img-src 'self' blob:;
Frame-Ancestors Error
Error:

vbnet
Copy code
Refused to frame '...' because an ancestor violates the following Content Security Policy directive: "frame-ancestors 'none'".
Explanation:

Cause: frame-ancestors 'none' prevents the React app or parts of it (like public/pdfjs) from embedding content in an iframe.
Solution: Allow parts of the React app (public/pdfjs) to be embedded only by other parts of the app at the same location (same origin: domain, protocol, port).
This ensures the iframe can only be embedded by the React app itself.
Prevents other websites or apps from embedding parts of your app.
CSP Update:

From:
css
Copy code
Content-Security-Policy: frame-ancestors 'none';
To:
css
Copy code
Content-Security-Policy: frame-ancestors 'self';
Iframe Sandbox
Setting:

html
Copy code
sandbox="allow-scripts allow-same-origin allow-popups"
Explanation:

Purpose: Restrict iframe functionality to what is necessary for PDF.js:
allow-scripts: Allow PDF.js to run its JavaScript for rendering.
allow-same-origin: Permit fetching origin-restricted resources like pre-signed S3 URLs.
allow-popups: Open links within PDFs in new tabs, not the iframe.
Effect: Minimizes attack surface by preventing other unsafe actions like form submissions or access to the parent app context.
Presigned URL Timeout
Problem:

Large files may fail to load if the presigned URL expires during PDF rendering.
Solution:

Increase the expiration time for presigned URLs to ensure large files remain accessible throughout rendering.
Potential Configuration Changes:

CloudFront
API Gateway
S3 Bucket Hosting Configuration







